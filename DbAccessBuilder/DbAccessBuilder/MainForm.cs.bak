using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Xml;
using System.Data.SqlClient;

namespace DbAccessBuilder
{
    public partial class MainForm : Form
    {
        const int PHASE_1 = 1;
        const int PHASE_2 = 2;
        const int PHASE_3 = 3;
        int CurPhase = 0;
        string Phase1OutPutFile = null;
        string Phase2OutputFile = null;

        public MainForm()
        {
            InitializeComponent();
            this.rBtnPhase1.Checked = true;
        }

        private void btnXmlBrowse_Click(object sender, EventArgs e)
        {
            switch (this.CurPhase)
            {
                case PHASE_1:
                case PHASE_2:
                    break;
                case PHASE_3:
                    break;
            }
            this.openFileDialog1.Filter = "Xml Files (.xml)|*.xml|All Files (*.*)|*.*";
            this.openFileDialog1.FilterIndex = 1;
            if (this.openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                this.txtXmlIn.Text = this.openFileDialog1.FileName;
            }
        }

        private void btnOutputBrowse_Click(object sender, EventArgs e)
        {
            switch (this.CurPhase)
            {
                case PHASE_1:
                case PHASE_2:
                    this.saveFileDialog1.Filter = "Xml Files (.xml)|*.xml";
                    break;
                case PHASE_3:
                    this.saveFileDialog1.Filter = "Code File (*.cs)|*.cs|Text File (*.txt)|*.txt";
                    break;
            }
            saveFileDialog1.FilterIndex = 1;
            saveFileDialog1.RestoreDirectory = true;
            this.saveFileDialog1.AddExtension = true;

            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                string outputFile = this.saveFileDialog1.FileName;
                this.txtOutputFile.Text = this.saveFileDialog1.FileName;
                this.txtOutputFile.Refresh();
            }
        }

        private string CapFirstLetter(string s)
        {
            return s.Substring(0, 1).ToUpper() + s.Substring(1);
        }

        // Convert a string to all caps
        private string ToAllCaps(string s)
        {
            return s.ToUpper();
        }

        // Convert a two char column attribute to long column type definitions
        private string GetLongColAttrib(string attrib)
        {
            if (attrib.ToUpper().Substring(0, 2) == "AI")
            {
                return "AutoID";
            }
            else if (attrib.ToUpper().Substring(0, 2) == "PK")
            {
                return "PrKey";
            }
            else if (attrib.ToUpper().Substring(0, 2) == "RW")
            {
                return "ReadWrite";
            }
            else if (attrib.ToUpper().Substring(0, 2) == "RO")
            {
                return "ReadOnly";
            }
            else if (attrib.ToUpper().Substring(0, 2) == "MD")
            {
                return "ModDate";
            }
            else return "*Column Atttribute Error*";
        }

        // Returns a .Net datatype that corresponds to the SQL Data type
        private string DotNetDataType(string sqlDataType, bool isNullable)
        {
            string sqlType = sqlDataType.ToUpper();
            if ((sqlType == "BIGINT") && !isNullable) return "long";
            if ((sqlType == "BIGINT") && isNullable) return "long?";
            else if ((sqlType == "BIT") && !isNullable) return "bool";
            else if ((sqlType == "BIT") && isNullable) return "bool?";
            else if ((sqlType == "CHAR") && !isNullable) return "string";
            else if ((sqlType == "CHAR") && isNullable) return "string";
            else if ((sqlType == "DATETIME") && !isNullable) return "DateTime";
            else if ((sqlType == "DATETIME") && isNullable) return "DateTime?";
            else if ((sqlType == "DATE") && !isNullable) return "DateTime";
            else if ((sqlType == "DATE") && isNullable) return "DateTime?";
            else if ((sqlType == "DECIMAL") && !isNullable) return "decimal";
            else if ((sqlType == "DECIMAL") && isNullable) return "decimal?";
            else if ((sqlType == "FLOAT") && !isNullable) return "float";
            else if ((sqlType == "FLOAT") && isNullable) return "float?";
            else if ((sqlType == "INT") && !isNullable) return "int";
            else if ((sqlType == "INT") && isNullable) return "int?";
            else if ((sqlType == "MONEY") && !isNullable) return "decimal";
            else if ((sqlType == "MONEY") && isNullable) return "decimal?";
            else if ((sqlType == "NCHAR") && !isNullable) return "string";
            else if ((sqlType == "NCHAR") && isNullable) return "string";
            else if ((sqlType == "NTEXT") && !isNullable) return "string";
            else if ((sqlType == "NTEXT") && isNullable) return "string";
            else if ((sqlType == "NUMERIC") && !isNullable) return "decimal";
            else if ((sqlType == "NUMERIC") && isNullable) return "decimal?";
            else if ((sqlType == "NVARCHAR") && !isNullable) return "string";
            else if ((sqlType == "NVARCHAR") && isNullable) return "string";
            else if ((sqlType == "REAL") && !isNullable) return "float";
            else if ((sqlType == "REAL") && isNullable) return "float?";
            else if ((sqlType == "SMALLDATETIME") && !isNullable) return "DateTime";
            else if ((sqlType == "SMALLDATETIME") && isNullable) return "DateTime?";
            else if ((sqlType == "SMALLINT") && !isNullable) return "short";
            else if ((sqlType == "SMALLINT") && isNullable) return "short?";
            else if ((sqlType == "SMALLMONEY") && !isNullable) return "decimal";
            else if ((sqlType == "SMALLMONEY") && isNullable) return "decimal?";
            else if ((sqlType == "TEXT") && !isNullable) return "string";
            else if ((sqlType == "TEXT") && isNullable) return "string";
            else if ((sqlType == "TINYINT") && !isNullable) return "byte";
            else if ((sqlType == "TINYINT") && isNullable) return "byte?";
            else if ((sqlType == "UNIQUEIDENTIFIER") && !isNullable) return "Guid";
            else if ((sqlType == "UNIQUEIDENTIFIER") && isNullable) return "Guid?";
            else if ((sqlType == "SMALLDATETIME") && !isNullable) return "DateTime";
            else if ((sqlType == "SMALLDATETIME") && isNullable) return "DateTime?";
            else if ((sqlType == "VARCHAR") && !isNullable) return "String";
            else if ((sqlType == "VARCHAR") && isNullable) return "String";
            else return "TypeIsError";
        }
        // Returns a Sql datatype in correct case for SQL Parameter Defs
        private string SqlDbType(string sqlDataType)
        {
            string sqlType = sqlDataType.ToUpper();
            if (sqlType == "BIGINT") return "BigInt";
            else if (sqlType == "BIT") return "Bit";
            else if (sqlType == "CHAR") return "Char";
            else if (sqlType == "DATETIME") return "DateTime";
            else if (sqlType == "DATE") return "Date";
            else if (sqlType == "DECIMAL") return "Decimal";
            else if (sqlType == "FLOAT") return "Float";
            else if (sqlType == "INT") return "Int";
            else if (sqlType == "MONEY") return "Money";
            else if (sqlType == "NCHAR") return "NChar";
            else if (sqlType == "NTEXT") return "NText";
            else if (sqlType == "NVARCHAR") return "NVarChar";
            else if (sqlType == "REAL") return "Real";
            else if (sqlType == "SMALLDATETIME") return "SmallDateTime";
            else if (sqlType == "SMALLINT") return "SmallInt";
            else if (sqlType == "SMALLMONEY") return "SmallMoney";
            else if (sqlType == "TEXT") return "Text";
            else if (sqlType == "TINYINT") return "TinyInt";
            else if (sqlType == "UNIQUEIDENTIFIER") return "UniqueIdentifier";
            else if (sqlType == "UNIQUEIDENTIFIER") return "UniqueIdentifier";
            else if (sqlType == "SMALLDATETIME") return "SmallDateTime";
            else if (sqlType == "VARCHAR") return "VarChar";
            else return "SqlTypeError";
        }

        private void createXmlStoredProcList()
        {
            // Get the SQL Server name and database and create a connection string
            string dbServer = this.txtSqlSvr.Text.Trim();
            if (String.IsNullOrEmpty(dbServer))
            {
                MessageBox.Show("A Sql Server Instance name has not been entered.", "Error");
                return;
            }
            string dataBaseName = this.txtDatabaseName.Text.Trim();
            if (String.IsNullOrEmpty(dbServer))
            {
                MessageBox.Show("A Sql Server database  name has not been entered.", "Error");
                return;
            }
            string sProcStartsWith = this.txtProcStartsWith.Text.Trim();
            if (String.IsNullOrEmpty(sProcStartsWith))
            {
                MessageBox.Show("A 'Starts With' string for stored procedures has not been defined.", "Error");
                return;
            }
            string connStr = String.Format(@"Data Source={0};Initial Catalog={1};Integrated Security=True", dbServer, dataBaseName);
            string cmdText = String.Format(@"SELECT (SCHEMA_NAME([schema_id]) + '.' + name) AS ProcName FROM sys.procedures WHERE name LIKE '{0}%'", sProcStartsWith);
            this.Phase1OutPutFile = this.txtOutputFile.Text;
            
            // Open sql reader to get proc names
            SqlConnection sqlConn = new SqlConnection(connStr);
            SqlCommand sqlCmd = new SqlCommand(cmdText, sqlConn);
            SqlDataReader sqlRdr;
            try
            {
                sqlConn.Open();
                sqlRdr = sqlCmd.ExecuteReader();
            }
            catch (Exception exc)
            {
                MessageBox.Show("Unable to get Xml Module List. Reason: " + exc.Message, "Error");
                return;
            }
            if (sqlRdr.HasRows)
            {
                // Create XmlWriter
                XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
                xmlWriterSettings.NewLineOnAttributes = false;
                xmlWriterSettings.Indent = true;

                XmlWriter xmlWriter = XmlWriter.Create(this.Phase1OutPutFile, xmlWriterSettings);

                xmlWriter.WriteStartElement("SqlInterfaceModules");
                xmlWriter.WriteAttributeString("DbServer", dbServer );
                xmlWriter.WriteAttributeString("DbName", dataBaseName);

                while (sqlRdr.Read())
                {
                    xmlWriter.WriteStartElement("SqlInterface");
                    xmlWriter.WriteAttributeString("GetRowsProc", sqlRdr["ProcName"].ToString());
                    xmlWriter.WriteAttributeString("DbRowsClassName", "RowsClass");
                    xmlWriter.WriteAttributeString("DbRowClassName", "RowClass");
                    xmlWriter.WriteAttributeString("PrimaryTable", "TableName");
                    xmlWriter.WriteAttributeString("InsertRowProc", "InsertProc");
                    xmlWriter.WriteAttributeString("HasIsActiveCol", "T or F");
                    xmlWriter.WriteEndElement();
                }
                xmlWriter.WriteEndDocument();
                xmlWriter.Close();
            }
            sqlRdr.Close();
            sqlConn.Close();
            MessageBox.Show("An xml List of database access modules has been created based on stored procedures found. "
                                                    + "The list at: " + this.Phase1OutPutFile + " needs to be edited to supply missing values and to remove unnecessary rows.", "Success");
        }

        private void genXmlColumns()
        {
            //string connStr = String.Format(@"Data Source={0};Initial Catalog={1};Integrated Security=True", dbServer, dataBaseName);
            FileInfo infile = new FileInfo(this.txtXmlIn.Text);
            string outputFile = this.txtOutputFile.Text;

            // Create XmlWriter
            XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
            xmlWriterSettings.NewLineOnAttributes = false;
            xmlWriterSettings.Indent = true;


            if (infile.Exists)
            {
                XmlWriter xmlWriter = XmlWriter.Create(outputFile, xmlWriterSettings);  // Create an XmlWriter
                using (StreamReader sr = infile.OpenText())
                {
                    XmlDocument xmlDoc = new XmlDocument();
                    try
                    {
                        xmlDoc.Load(sr);
                    }
                    catch (Exception exc)
                    {
                        MessageBox.Show("Unable to open Xml input file. Reason: " + exc.Message, "Error");
                        return;
                    }
                    XmlElement rootElement = xmlDoc.DocumentElement;
                    // Get database server and database - then create a connction string
                    string dbServer = rootElement.Attributes["DbServer"].Value;
                    string dbName = rootElement.Attributes["DbName"].Value;
                    // Write the root element, get SqlConnection object
                    xmlWriter.WriteStartElement("SqlInterfaceDefs");
                    xmlWriter.WriteAttributeString("DbServer", dbServer);
                    xmlWriter.WriteAttributeString("DbName", dbName);
                    string connStr = String.Format(@"Data Source={0};Initial Catalog={1};Integrated Security=True", dbServer, dbName);
                    SqlConnection sqlConn = new SqlConnection(connStr);
                    foreach (XmlNode interfaceNode in rootElement)  // Loop through interface module defs
                    {
                        if (interfaceNode.Name == "SqlInterface")
                        {
                            // Copy interface attributes from input file to output
                            string sqlProc = interfaceNode.Attributes["GetRowsProc"].Value;
                            string rowsClass = interfaceNode.Attributes["DbRowsClassName"].Value;
                            string rowClass = interfaceNode.Attributes["DbRowClassName"].Value;
                            string priTable = interfaceNode.Attributes["PrimaryTable"].Value;
                            string insProc = interfaceNode.Attributes["InsertRowProc"].Value;
                            string hasActive = interfaceNode.Attributes["HasIsActiveCol"].Value;
                            // Write the column definitions
                            GenSqlColDefs.InsertColumnDefs(xmlWriter, sqlConn, sqlProc, rowsClass, rowClass, priTable, insProc, hasActive);
                            xmlWriter.WriteEndElement();
                        }
                    }
                }
                xmlWriter.WriteEndDocument();
                xmlWriter.Close();
                MessageBox.Show("Xml column definitions completed successfully. The column definitions at: " + outputFile + " need to be checked for accuracy and redundancy.", "Success");
            }
        }

        private void genSqlDbInterfaceCode()
        {
            FileInfo infile = new FileInfo(this.txtXmlIn.Text);
            FileInfo outFile = new FileInfo(this.txtOutputFile.Text);
            if (infile.Exists)
            {
                using (StreamReader sr = infile.OpenText())
                {
                    using (StreamWriter sw = outFile.CreateText())
                    {

                        SqlInterfaceBuilder.CreateSqlInterface(sr, sw);
                        MessageBox.Show("Sql interface code generation completed successfully.");
                    }
                }
            }
        }

        private void btnDoPhase_Click(object sender, EventArgs e)
        {
            switch (this.CurPhase)
            {
                case PHASE_1:
                    createXmlStoredProcList();
                    break;
                case PHASE_2:
                    genXmlColumns();
                    break;
                case PHASE_3:
                    genSqlDbInterfaceCode();
                    break;
            }
        }

        private void rBtnPhase1_CheckedChanged(object sender, EventArgs e)
        {
            if (rBtnPhase1.Checked)
            {
                this.CurPhase = PHASE_1;
                this.txtXmlIn.Text = null;
                this.txtXmlIn.Enabled = this.btnXmlBrowse.Enabled = false;
                this.txtSqlSvr.Enabled = this.txtDatabaseName.Enabled = this.txtProcStartsWith.Enabled = true;
                this.btnDoPhase.Text = "Get Xml Stored Procedure list";
            }
            else
            {
                this.Phase1OutPutFile = this.txtOutputFile.Text;
            }
        }

        private void rBtnPhase2_CheckedChanged(object sender, EventArgs e)
        {
            if (rBtnPhase2.Checked)
            {
                this.CurPhase = PHASE_2;
                this.txtXmlIn.Enabled = this.btnXmlBrowse.Enabled = true;
                this.txtXmlIn.Text = this.Phase1OutPutFile;
                this.txtOutputFile.Text = null;
                this.txtSqlSvr.Enabled = this.txtDatabaseName.Enabled = this.txtProcStartsWith.Enabled = false;
                this.btnDoPhase.Text = "Gen Xml Column Definitions";
            }
            else
            {
                this.Phase2OutputFile = this.txtOutputFile.Text;
            }
        }

        private void rBtnPhase3_CheckedChanged(object sender, EventArgs e)
        {
            this.txtXmlIn.Enabled = this.btnXmlBrowse.Enabled = true;
            this.txtSqlSvr.Enabled = this.txtDatabaseName.Enabled = this.txtProcStartsWith.Enabled = false;
            this.btnDoPhase.Text = "Gen Database Interface Code";
            this.CurPhase = PHASE_3;
            this.txtXmlIn.Enabled = true;
            this.txtXmlIn.Text = this.Phase2OutputFile;
            this.txtOutputFile.Text = null;
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }
    }
}
